#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FinalProject
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FinalProject")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertLesson(Lesson instance);
    partial void UpdateLesson(Lesson instance);
    partial void DeleteLesson(Lesson instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::FinalProject.Properties.Settings.Default.FinalProjectConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Lesson> Lessons
		{
			get
			{
				return this.GetTable<Lesson>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CourseSearchLesseon")]
		public ISingleResult<CourseSearchLesseonResult> CourseSearchLesseon([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="NVarChar(10)")] string iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((ISingleResult<CourseSearchLesseonResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CourseSearchStudent")]
		public ISingleResult<CourseSearchStudentResult> CourseSearchStudent([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="NVarChar(10)")] string iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((ISingleResult<CourseSearchStudentResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertLesson")]
		public int InsertLesson([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="NVarChar(10)")] string iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Credit", DbType="Int")] System.Nullable<int> credit)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, name, credit);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertCourse")]
		public int InsertCourse([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StudentID", DbType="NVarChar(10)")] string studentID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LessonID", DbType="NVarChar(10)")] string lessonID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> grade)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), studentID, lessonID, grade);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SearchStudent")]
		public ISingleResult<Student> SearchStudent([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="NVarChar(10)")] string iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((ISingleResult<Student>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertStudent")]
		public int InsertStudent([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="NVarChar(10)")] string iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FName", DbType="NVarChar(50)")] string fName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LName", DbType="NVarChar(50)")] string lName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BirthDate", DbType="Date")] System.Nullable<System.DateTime> birthDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Image", DbType="NVarChar(MAX)")] string image)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, fName, lName, birthDate, image);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SearchLesson")]
		public ISingleResult<Lesson> SearchLesson([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="NVarChar(10)")] string iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((ISingleResult<Lesson>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SearchCourse")]
		public ISingleResult<Course> SearchCourse([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StudentID", DbType="NVarChar(10)")] string studentID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LessonID", DbType="NVarChar(10)")] string lessonID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), studentID, lessonID);
			return ((ISingleResult<Course>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateStudent")]
		public int UpdateStudent([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="NVarChar(10)")] string iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FName", DbType="NVarChar(50)")] string fName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LName", DbType="NVarChar(50)")] string lName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BirthDate", DbType="Date")] System.Nullable<System.DateTime> birthDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Image", DbType="NVarChar(MAX)")] string image)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, fName, lName, birthDate, image);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateLesson")]
		public int UpdateLesson([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="NVarChar(10)")] string iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Credit", DbType="Int")] System.Nullable<int> credit)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, name, credit);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateCourse")]
		public int UpdateCourse([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StudentID", DbType="NVarChar(10)")] string studentID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LessonName", DbType="NVarChar(50)")] string lessonName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Grade", DbType="Int")] System.Nullable<int> grade)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), studentID, lessonName, grade);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteStudent")]
		public int DeleteStudent([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="NVarChar(10)")] string iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteLesson")]
		public int DeleteLesson([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="NVarChar(10)")] string iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteCourse")]
		public int DeleteCourse([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StudentID", DbType="NVarChar(10)")] string studentID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LessonID", DbType="NVarChar(10)")] string lessonID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), studentID, lessonID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetStudentTable")]
		public ISingleResult<Student> GetStudentTable()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Student>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetLessonTable")]
		public ISingleResult<Lesson> GetLessonTable()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Lesson>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetCourseTable")]
		public ISingleResult<Course> GetCourseTable()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Course>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.StudentLessonsReport")]
		public ISingleResult<Course> StudentLessonsReport([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="NVarChar(10)")] string iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((ISingleResult<Course>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.LessonStudentsReport")]
		public ISingleResult<Course> LessonStudentsReport([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="NVarChar(10)")] string iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((ISingleResult<Course>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetAvg")]
		public ISingleResult<GetAvgResult1> GetAvg()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetAvgResult1>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetCountRejectedStudent")]
		public ISingleResult<GetCountRejectedStudentResult> GetCountRejectedStudent()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetCountRejectedStudentResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _f_name;
		
		private string _l_name;
		
		private System.Nullable<System.DateTime> _birthdate;
		
		private string _image;
		
		private EntitySet<Course> _Courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void Onf_nameChanging(string value);
    partial void Onf_nameChanged();
    partial void Onl_nameChanging(string value);
    partial void Onl_nameChanged();
    partial void OnbirthdateChanging(System.Nullable<System.DateTime> value);
    partial void OnbirthdateChanged();
    partial void OnimageChanging(string value);
    partial void OnimageChanged();
    #endregion
		
		public Student()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_f_name", DbType="NVarChar(50)")]
		public string f_name
		{
			get
			{
				return this._f_name;
			}
			set
			{
				if ((this._f_name != value))
				{
					this.Onf_nameChanging(value);
					this.SendPropertyChanging();
					this._f_name = value;
					this.SendPropertyChanged("f_name");
					this.Onf_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_l_name", DbType="NVarChar(50)")]
		public string l_name
		{
			get
			{
				return this._l_name;
			}
			set
			{
				if ((this._l_name != value))
				{
					this.Onl_nameChanging(value);
					this.SendPropertyChanging();
					this._l_name = value;
					this.SendPropertyChanged("l_name");
					this.Onl_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birthdate", DbType="Date")]
		public System.Nullable<System.DateTime> birthdate
		{
			get
			{
				return this._birthdate;
			}
			set
			{
				if ((this._birthdate != value))
				{
					this.OnbirthdateChanging(value);
					this.SendPropertyChanging();
					this._birthdate = value;
					this.SendPropertyChanged("birthdate");
					this.OnbirthdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Course", Storage="_Courses", ThisKey="ID", OtherKey="student_ID")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lesson")]
	public partial class Lesson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _name;
		
		private System.Nullable<int> _credit;
		
		private EntitySet<Course> _Courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncreditChanging(System.Nullable<int> value);
    partial void OncreditChanged();
    #endregion
		
		public Lesson()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_credit", DbType="Int")]
		public System.Nullable<int> credit
		{
			get
			{
				return this._credit;
			}
			set
			{
				if ((this._credit != value))
				{
					this.OncreditChanging(value);
					this.SendPropertyChanging();
					this._credit = value;
					this.SendPropertyChanged("credit");
					this.OncreditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_Course", Storage="_Courses", ThisKey="ID", OtherKey="lesson_ID")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _student_ID;
		
		private string _lesson_ID;
		
		private System.Nullable<int> _grade;
		
		private EntityRef<Lesson> _Lesson;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onstudent_IDChanging(string value);
    partial void Onstudent_IDChanged();
    partial void Onlesson_IDChanging(string value);
    partial void Onlesson_IDChanged();
    partial void OngradeChanging(System.Nullable<int> value);
    partial void OngradeChanged();
    #endregion
		
		public Course()
		{
			this._Lesson = default(EntityRef<Lesson>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_student_ID", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string student_ID
		{
			get
			{
				return this._student_ID;
			}
			set
			{
				if ((this._student_ID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstudent_IDChanging(value);
					this.SendPropertyChanging();
					this._student_ID = value;
					this.SendPropertyChanged("student_ID");
					this.Onstudent_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lesson_ID", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string lesson_ID
		{
			get
			{
				return this._lesson_ID;
			}
			set
			{
				if ((this._lesson_ID != value))
				{
					if (this._Lesson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onlesson_IDChanging(value);
					this.SendPropertyChanging();
					this._lesson_ID = value;
					this.SendPropertyChanged("lesson_ID");
					this.Onlesson_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_grade", DbType="Int")]
		public System.Nullable<int> grade
		{
			get
			{
				return this._grade;
			}
			set
			{
				if ((this._grade != value))
				{
					this.OngradeChanging(value);
					this.SendPropertyChanging();
					this._grade = value;
					this.SendPropertyChanged("grade");
					this.OngradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_Course", Storage="_Lesson", ThisKey="lesson_ID", OtherKey="ID", IsForeignKey=true)]
		public Lesson Lesson
		{
			get
			{
				return this._Lesson.Entity;
			}
			set
			{
				Lesson previousValue = this._Lesson.Entity;
				if (((previousValue != value) 
							|| (this._Lesson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lesson.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Lesson.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._lesson_ID = value.ID;
					}
					else
					{
						this._lesson_ID = default(string);
					}
					this.SendPropertyChanged("Lesson");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Course", Storage="_Student", ThisKey="student_ID", OtherKey="ID", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._student_ID = value.ID;
					}
					else
					{
						this._student_ID = default(string);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class CourseSearchLesseonResult
	{
		
		private string _student_ID;
		
		private System.Nullable<int> _grade;
		
		public CourseSearchLesseonResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_student_ID", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string student_ID
		{
			get
			{
				return this._student_ID;
			}
			set
			{
				if ((this._student_ID != value))
				{
					this._student_ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_grade", DbType="Int")]
		public System.Nullable<int> grade
		{
			get
			{
				return this._grade;
			}
			set
			{
				if ((this._grade != value))
				{
					this._grade = value;
				}
			}
		}
	}
	
	public partial class CourseSearchStudentResult
	{
		
		private string _lesson_ID;
		
		private System.Nullable<int> _grade;
		
		public CourseSearchStudentResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lesson_ID", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string lesson_ID
		{
			get
			{
				return this._lesson_ID;
			}
			set
			{
				if ((this._lesson_ID != value))
				{
					this._lesson_ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_grade", DbType="Int")]
		public System.Nullable<int> grade
		{
			get
			{
				return this._grade;
			}
			set
			{
				if ((this._grade != value))
				{
					this._grade = value;
				}
			}
		}
	}
	
	public partial class GetAvgResult1
	{
		
		private System.Nullable<int> _average;
		
		private string _student_ID;
		
		public GetAvgResult1()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_average", DbType="Int")]
		public System.Nullable<int> average
		{
			get
			{
				return this._average;
			}
			set
			{
				if ((this._average != value))
				{
					this._average = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_student_ID", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string student_ID
		{
			get
			{
				return this._student_ID;
			}
			set
			{
				if ((this._student_ID != value))
				{
					this._student_ID = value;
				}
			}
		}
	}
	
	public partial class GetCountRejectedStudentResult
	{
		
		private string _lesson_ID;
		
		private System.Nullable<int> _rejectedCount;
		
		public GetCountRejectedStudentResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lesson_ID", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string lesson_ID
		{
			get
			{
				return this._lesson_ID;
			}
			set
			{
				if ((this._lesson_ID != value))
				{
					this._lesson_ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rejectedCount", DbType="Int")]
		public System.Nullable<int> rejectedCount
		{
			get
			{
				return this._rejectedCount;
			}
			set
			{
				if ((this._rejectedCount != value))
				{
					this._rejectedCount = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
